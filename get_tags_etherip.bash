#!/usr/bin/env bash
#
#  Copyright (c) 2016 - 2020    Jeong Han Lee
#  Copyright (c) 2016 - 2019    European Spallation Source ERIC
#
#  The program is free software: you can redistribute
#  it and/or modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation, either version 2 of the
#  License, or any newer version.
#
#  This program is distributed in the hope that it will be useful, but WITHOUT
#  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
#  more details.
#
#  You should have received a copy of the GNU General Public License along with
#  this program. If not, see https://www.gnu.org/licenses/gpl-2.0.txt
#
# Author  : Jeong Han Lee
# email   : jeonghan.lee@gmail.com
# Date    : Monday, April 20 16:40:43 PDT 2020
# version : 1.0.7

declare -gr SC_SCRIPT="$(realpath "$0")"
declare -gr SC_SCRIPTNAME=${0##*/}
declare -gr SC_TOP="${SC_SCRIPT%/*}"

declare -a pvlist=();


declare ip_addr="128.3.129.209"

declare slot="0"

function usage
{
    {
	echo "";
	echo "Usage    : $0 [-l pvlist_file] [-f <filter_string>] "
	echo "";
	echo "               -l : pvlist file generated by dbl output or hand"
	echo "               -f : without arg, select all"
	echo "";
	echo " bash $0 -l pvlist_file"
	echo " bash $0 -l pvlist_file -f \"RB\" "
	echo ""
	
    } 1>&2;
    exit 1; 
}


function pvs_from_list
{
    local i=0;
    local j=0;
    local pv;
    local filename="$1"
    local filter="$2"
    local raw_pvlist=();
    local temp_pvlist=();
    let i=0
    while IFS= read -r line_data; do
	if [ "$line_data" ]; then
	    [[ "$line_data" =~ ^#.*$ ]] && continue
	    raw_pvlist[i]="${line_data}"
	    ((++i))
	fi
    done < "${filename}"

    # https://stackoverflow.com/questions/7442417/how-to-sort-an-array-in-bash
    IFS=$'\n' read -d '' -r -a temp_pvlist < <(printf '%s\n' "${raw_pvlist[@]}" | sort)

    if [ -z "$filter" ]; then
	let i=0;
	for pv in ${temp_pvlist[@]}; do
	    pvlist[i]="$pv"
	    ((++i))
	done
    else
	let j=0
	for pv in ${temp_pvlist[@]}; do
	    if test "${pv#*$filter}" != "$pv"; then
		pvlist[j]="$pv"
		((++j))
	    fi
	done
    fi
    
}

function getValue_pvlist
{
    local pv;
    local sleep_interval=0.001
	for pv in ${pvlist[@]}; do
 	    cmd="${GET_CMD} "
        cmd+="$pv"
        echo $cmd
	    sleep ${sleep_interval}
	done
    printf "\n";
}

# l:, arg is mandatory
# c , arg is optional

options="l:f:"
RESETCA="NO"
AUTO_ADDR=""
GET_CMD="${HOME}/bin/ether_ip_test -i $ip_addr -s $slot"
WATCH=""
LIST=""
SUBSTRING=""
AUTO_ADDR="YES"

while getopts "${options}" opt; do
    case "${opt}" in
        l) LIST=${OPTARG}      ;;
        f) SUBSTRING=${OPTARG} ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            usage
        ;;
        h)
            usage
        ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            usage
        ;;
    esac
done
shift $((OPTIND-1))


if [ -z "$LIST" ]; then
    usage;
fi


pvs_from_list "${LIST}" "${SUBSTRING}"

getValue_pvlist

