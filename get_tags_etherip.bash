#!/usr/bin/env bash
#
#  Copyright (c) 2016 - 2020    Jeong Han Lee
#  Copyright (c) 2016 - 2019    European Spallation Source ERIC
#
#  The program is free software: you can redistribute
#  it and/or modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation, either version 2 of the
#  License, or any newer version.
#
#  This program is distributed in the hope that it will be useful, but WITHOUT
#  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
#  more details.
#
#  You should have received a copy of the GNU General Public License along with
#  this program. If not, see https://www.gnu.org/licenses/gpl-2.0.txt
#
# Author  : Jeong Han Lee
# email   : jeonghan.lee@gmail.com
# Date    : Monday, April 20 16:40:43 PDT 2020
# version : 1.0.7

#declare -g SC_SCRIPT;
#declare -g SC_SCRIPTNAME;
#declare -g SC_TOP;
#declare -g LOGDATE;

#SC_SCRIPT="$(realpath "$0")";
#SC_SCRIPTNAME=${0##*/};
#SC_TOP="${SC_SCRIPT%/*}"
#LOGDATE="$(date +%y%m%d%H%M)"

declare -a entrylist=();

declare ip_addr=""

declare slot="0"

function usage
{
    {
	echo "";
	echo "Usage    : $0 [-l entrylist_file] [-f <filter_string>] "
	echo "";
	echo "               -l : entrylist file generated by dbl output or hand"
	echo "               -f : without arg, select all"
	echo "";
	echo " bash $0 -l entrylist_file"
	echo " bash $0 -l entrylist_file -f \"RB\" "
	echo ""
	
    } 1>&2;
    exit 1; 
}

## 1 : Filename which contains the list of entry
## 2 : filter : for the entry list
## Global Array Variable : entrylist
function entries_from_list
{
    local i=0;
    local j=0;
    local entry;
    local filename="$1"; shift;
    local filter="$1"; shift;
    local raw_entrylist=();
    local temp_entrylist=();
    ((i=0))
    while IFS= read -r line_data; do
		if [ "$line_data" ]; then
	    	[[ "$line_data" =~ ^#.*$ ]] && continue
	    	raw_entrylist[i]="${line_data}"
	    	((++i))
		fi
    done < "${filename}"

    # https://stackoverflow.com/questions/7442417/how-to-sort-an-array-in-bash
    IFS=$'\n' read -d '' -r -a temp_entrylist < <(printf '%s\n' "${raw_entrylist[@]}")

    if [ -z "$filter" ]; then
		((i=0));
		for entry in "${temp_entrylist[@]}"; do
	    	entrylist[i]="$entry"
	    	((++i))
		done
    else
		((j=0));
		for entry in "${temp_entrylist[@]}"; do
	    	if test "${entry#*$filter}" != "$entry"; then
				entrylist[j]="$entry"
				((++j))
	    	fi
		done
    fi
}


## Global Array Variable : entrylist
## Global Variable : CMD 
function do_entrylist
{
    local entry;
    local sleep_interval=0.01;
	for entry in "${entrylist[@]}"; do
#        echo "$entry"
        echo -e "ether_ip_test -i $ip_addr -s $slot  -v 1  $entry"
	    sleep ${sleep_interval}
	done
}

# l:, arg is mandatory
# c , arg is optional

options=":l:f"

LIST=""
SUBSTRING=""

while getopts "${options}" opt; do
    case "${opt}" in
        l) LIST=${OPTARG}      ;;
        f) SUBSTRING=${OPTARG} ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            usage
        ;;
        h)
            usage
        ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            usage
        ;;
    esac
done
shift $((OPTIND-1))


if [ -z "$LIST" ]; then
    usage;
fi


entries_from_list "${LIST}" "${SUBSTRING}"

do_entrylist

